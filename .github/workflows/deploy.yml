name: Deploy CorrelateAI Pro to GitHub Pages

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'public/ai-data/**'
      - 'data-summary.md'
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_FRED_API_KEY: ${{ secrets.VITE_FRED_API_KEY }}
          VITE_APP_NAME: "CorrelateAI Pro"
          VITE_APP_VERSION: "1.0.0"
          # Skip network-heavy prefetch/generate steps in CI to make the build deterministic
          SKIP_PREFETCH: 'true'

      - name: Verify build output
        run: |
          # Verify build output and required files
          echo "Build output contents:"
          ls -la ./dist/
          
          echo ""
          echo "Checking critical files:"
          
          # Check .nojekyll (copied from public/)
          if [ -f "./dist/.nojekyll" ]; then
            echo "✓ .nojekyll found (prevents Jekyll processing)"
          else
            echo "❌ ERROR: .nojekyll missing - GitHub Pages may break!"
            exit 1
          fi
          
          # Check site.webmanifest
          if [ -f "./dist/site.webmanifest" ]; then
            echo "✓ site.webmanifest found"
          else
            echo "❌ ERROR: site.webmanifest missing!"
            exit 1
          fi
          
          # Check index.html
          if [ -f "./dist/index.html" ]; then
            echo "✓ index.html found"
          else
            echo "❌ ERROR: index.html missing!"
            exit 1
          fi
          
          # Check assets directory and JS modules
          if [ -d "./dist/assets" ]; then
            echo "✓ assets/ directory found"
            JS_COUNT=$(find ./dist/assets -name "*.js" | wc -l)
            echo "  Found $JS_COUNT JavaScript files"
            if [ "$JS_COUNT" -eq 0 ]; then
              echo "❌ ERROR: No JavaScript files in assets!"
              exit 1
            fi
          else
            echo "❌ ERROR: assets/ directory missing!"
            exit 1
          fi
          
          echo ""
          echo "✓ All critical files verified successfully"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare artifact for upload
        run: |
          echo "Verifying artifact contents before upload..."
          
          # Show what will be uploaded
          echo "Files in ./dist/ (first 50):"
          find ./dist -type f | head -50
          
          # Critical check: ensure index.html has production script tags
          if grep -q 'src="/src/main.tsx"' ./dist/index.html; then
            echo "❌ ERROR: dist/index.html contains dev script tag!"
            echo "Build failed to transform the script tags correctly."
            exit 1
          else
            echo "✓ index.html has production script tags"
          fi
          
          # Show the actual script tag for verification
          echo "Script tags in dist/index.html:"
          grep -A2 'script.*module' ./dist/index.html || echo "No module scripts found"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verify deployment
        run: |
          echo "Deployment completed!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo ""
          echo "If you see MIME type errors, it may be a browser cache issue."
          echo "Try hard-refresh (Ctrl+Shift+R or Cmd+Shift+R) or clear site data."